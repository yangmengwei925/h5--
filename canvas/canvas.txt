1.fillRect(x, y, width, height)

绘制一个填充的矩形

2.strokeRect(x, y, width, height)

绘制一个矩形的边框

3.clearRect(x, y, widh, height)

清除指定的矩形区域，然后这块区域会变的完全透明。

说明：x, y：指的是矩形的左上角的坐标，width, height：指的是绘制的矩形的宽和高。


绘制路径(path);
1.路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。
  (1)创建路径起始点
  (2)调用绘制方法去绘制出路径
  (2)把路径封闭
  (3)一旦路径生成，通过描边或填充路径区域来渲染图形

  beginPath()
  新建一条路径，路径一旦创建成功，图形绘制命令被指向到路径上生成路径

  moveTo(x, y)
  把画笔移动到指定的坐标(x, y)。相当于设置路径的起始点坐标。

  lineTo(x,y)
  绘制一条从当前位置到指定坐标(x,y)的直线

  closePath()
  闭合路径之后，图形绘制命令又重新指向到上下文中

  stroke()
  通过线条来绘制图形轮廓

  fill()
  通过填充路径的内容区域生成实心的图形
  1.填充闭合区域。如果path没有闭合，则fill()会自动闭合路径


  绘制圆弧
  arc(x, y, r, startAngle, endAngle, anticlockwise):


  以(x, y)为圆心，
  以r为半径，从 startAngle弧度开始到endAngle弧度结束。
  anticlosewise是布尔值，true表示逆时针，false表示顺时针。(默认是顺时针)
  Math.PI()=3.14=180deg

  设置文字大小
    画布.font = 文字大小 粗细 字体
  设置文字水平对齐方式
    画布.textAlign = "center|left(默认)|right|start|end"
  设置文字垂直对齐方式
    画布.textBaseline = "top|bottom(默认)|middle"
  绘制文字
    画布.fillText(文本内容,x,y) 实心文字
    画布.strokeText(文本内容,x,y) 空心文字


  移动画布原点
    画布.translate(x,y) 默认再左上角

  保存画布状态 
  画布.save()
  还原画布状态
  画布.restore();


  map(array,fn,this)this始终指向函数定义时所在的对象

  Math.cos(弧度)*半径 = x 

  Math.cos()于弦 
  于：临边比斜边
  紧挨着角度叫临边
  
  Math.sin()正弦
  正：对边比斜边

  斜边就是半径

  正切，余切
  于：临边比斜边
  正：对边比斜边

  canvas.getContext测试浏览器是否支持canvas

  canvas.getContext('2d')会拿到一个CanvasRenderingContext2D对象绘图操作都需要这个对象完成。


















